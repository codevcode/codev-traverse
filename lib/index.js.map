{"version":3,"sources":["../src/index.js"],"names":["traverse","value","makeNext","keys","schemas","input","output","Array","isArray","fallback","Promise","all","map","key","sch","middleware","ctx","contents","schema","next","v","i","Object","compose","middlewares","m","a","length","reduce","chainedNext"],"mappings":"urBAAA,GAAMA,UAAW,QAAXA,SAAW,eAAU,4BAAc,oFAAO,kBAAOC,KAAP,KACrCC,SADqC,kIACrCA,QADqC,SACrCA,SADqC,CAC3BC,IAD2B,CACrBC,OADqB,CACZ,gBAChC,sEAAO,kBAAOC,KAAP,yIACCC,MADD,CACUC,MAAMC,OAAN,CAAcJ,OAAd,EAAyB,EAAzB,CAA8B,EADxC,CAGL;AACA;AACA;AACA;AACA;AACA;AAEIK,QAVC,CAUU,IAVV,wBAWCC,SAAQC,GAAR,CAAYR,KAAKS,GAAL,gEAAS,iBAAOC,GAAP,yHACnBC,GADmB,CACbV,QAAQS,GAAR,GAAgBJ,QADH,CAEzBA,SAAWK,GAAX,CAFyB,sBAGLd,UAASc,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BX,MAAMQ,GAAN,CAA/B,CAHK,QAGzBP,OAAOO,GAAP,CAHyB,0EAAT,+DAAZ,CAXD,yCAiBEP,MAjBF,+DAAP,8DAmBD,CArB6C,CAuBtCW,QAvBsC,CAuBzBC,MAvByB,CAuBtCD,QAvBsC,CAwB1CE,IAxB0C,QAyB9C,GAAIZ,MAAMC,OAAN,CAAcS,QAAd,CAAJ,CAA6B,CAC3BE,KAAOjB,SAASD,MAAMW,GAAN,CAAU,SAACQ,CAAD,CAAIC,CAAJ,QAAUA,EAAV,CAAV,CAAT,CAAiCJ,QAAjC,CACR,CAFD,IAEO,IAAI,OAAOA,SAAP,mCAAOA,QAAP,KAAoB,QAAxB,CAAkC,CACvCE,KAAOjB,SAASoB,OAAOnB,IAAP,CAAYc,QAAZ,CAAT,CAAgCA,QAAhC,CACR,CAFM,IAEA,CACLE,KAAO,uBAAKC,EAAL,CACR,CA/B6C,iCAiCvCL,WAAWG,MAAX,EAAmBF,GAAnB,EAAwBG,IAAxB,EAA8BlB,KAA9B,CAjCuC,mEAAP,6DAAd,CAAV,CAAjB,CAoCA,GAAMsB,SAAU,QAAVA,QAAU,oBAAe,wBAAU,qBAAO,sBAAQC,aACnDZ,GADmD,CAC/C,SAACa,CAAD,CAAIJ,CAAJ,CAAOK,CAAP,QAAaA,GAAEA,EAAEC,MAAF,CAAWN,CAAX,CAAe,CAAjB,CAAb,CAD+C,CACb;AADa,CAEnDO,MAFmD,CAGlD,SAACC,WAAD,CAAcd,UAAd,QAA6BA,YAAWG,MAAX,EAAmBF,GAAnB,EAAwBa,WAAxB,CAA7B,CAHkD,CAGiBV,IAHjB,CAAR,CAAP,CAAV,CAAf,CAAhB,C,gBAOenB,Q,SACNuB,O,CAAAA,O","file":"index.js","sourcesContent":["const traverse = schema => middleware => ctx => async (value) => {\r\n  function makeNext (keys, schemas) {\r\n    return async (input) => {\r\n      const output = Array.isArray(schemas) ? [] : {}\r\n\r\n      // let fallback = null\r\n      // for (const key of keys) {\r\n      //   const sch = schemas[key] || fallback\r\n      //   fallback = sch\r\n      //   output[key] = await traverse(sch)(middleware)(ctx)(input[key])\r\n      // }\r\n\r\n      let fallback = null\r\n      await Promise.all(keys.map(async (key) => {\r\n        const sch = schemas[key] || fallback\r\n        fallback = sch\r\n        output[key] = await traverse(sch)(middleware)(ctx)(input[key])\r\n      }))\r\n\r\n      return output\r\n    }\r\n  }\r\n\r\n  const { contents } = schema\r\n  let next\r\n  if (Array.isArray(contents)) {\r\n    next = makeNext(value.map((v, i) => i), contents)\r\n  } else if (typeof contents === 'object') {\r\n    next = makeNext(Object.keys(contents), contents)\r\n  } else {\r\n    next = v => v\r\n  }\r\n\r\n  return middleware(schema)(ctx)(next)(value)\r\n}\r\n\r\nconst compose = middlewares => schema => ctx => next => middlewares\r\n    .map((m, i, a) => a[a.length - i - 1]) // reverse\r\n    .reduce(\r\n      (chainedNext, middleware) => middleware(schema)(ctx)(chainedNext), next\r\n    )\r\n\r\n\r\nexport default traverse\r\nexport { compose }\r\n"]}